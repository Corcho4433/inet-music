// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String // Hashed password
  name      String?
  avatar    String? // URL to avatar image
  createdAt DateTime?  @default(now())
  updatedAt DateTime? @updatedAt

  trips     Trip[]
  cartItems CartItem[]
  orders    Order[]

  @@map("users")
}

model Package {
  id          String    @id @default(cuid())
  name        String
  description String
  destination String
  duration    Int // days
  price       Decimal   @db.Decimal(10, 2)
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  services  PackageService[]
  cartItems CartItem[]
  OrderItem OrderItem[]

  @@map("packages")
}

model Service {
  id          String      @id @default(cuid())
  type        ServiceType
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  metadata    Json // Store service-specific data
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt

  packageServices PackageService[]
  tripServices    TripService[]

  @@map("services")
}

model PackageService {
  id        String @id @default(cuid())
  packageId String
  serviceId String

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([packageId, serviceId])
  @@map("package_services")
}

model Trip {
  id        String     @id @default(cuid())
  name      String
  userId    String
  status    TripStatus @default(DRAFT)
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  services  TripService[]
  cartItems CartItem[]
  OrderItem OrderItem[]

  @@map("trips")
}

model TripService {
  id        String @id @default(cuid())
  tripId    String
  serviceId String
  quantity  Int    @default(1)

  trip    Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([tripId, serviceId])
  @@map("trip_services")
}

model CartItem {
  id        String       @id @default(cuid())
  userId    String
  itemType  CartItemType
  packageId String?
  tripId    String?
  quantity  Int          @default(1)
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  package Package? @relation(fields: [packageId], references: [id], onDelete: Cascade)
  trip    Trip?    @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String       @id @default(cuid())
  orderId   String
  itemType  CartItemType
  packageId String?
  tripId    String?
  quantity  Int          @default(1)
  price     Decimal      @db.Decimal(10, 2)
  metadata  Json // Store item details at time of purchase

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  package Package? @relation(fields: [packageId], references: [id])
  trip    Trip?    @relation(fields: [tripId], references: [id])

  @@map("order_items")
}

enum ServiceType {
  FLIGHT
  LODGING
  ACTIVITY
  TRANSPORT
}

enum TripStatus {
  DRAFT
  CONFIRMED
  PURCHASED
}

enum CartItemType {
  PACKAGE
  TRIP
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
